export interface TestCase {
  input: any;
  output: any;
}

export interface Task {
  id: number;
  title: string;
  description: string;
  detailedDescription: string;
  testInput: any;
  expectedOutput: any;
  hints: string[];

  difficulty?: "easy" | "medium" | "hard";
  category?: string;
  timeLimit?: number;
  examples?: TestCase[];
}

export const tasks: Task[] = [
  {
    id: 1,
    title: "Знайти максимум у масиві",
    description:
      "Напиши функцію, яка отримує масив чисел і повертає найбільше число. Функція повинна перебрати всі числа в масиві, порівнювати їх між собою та знайти максимальне. Це базова задача для роботи з масивами та підготовки до більш складних алгоритмів.",
    detailedDescription: `Мета: знайти найбільше число серед усіх чисел у масиві.

Кроки:
1. Візьми перший елемент масиву і вважай його найбільшим на початку.
2. Перебери всі інші елементи масиву по черзі.
3. Для кожного елемента порівняй його з поточним максимумом:
   - Якщо елемент більший, онови максимум.
   - Якщо ні, залиш його без змін.
4. Продовжуй, поки не перевірено всі числа.
5. Після завершення циклу поверни значення максимуму.

Чому так:
- Це гарантує, що ми не пропустимо жодного числа.
- Порівняння кожного елемента з поточним максимумом дає правильний результат незалежно від порядку чисел.

Користь:
- Це базовий алгоритм для пошуку найбільшого елемента.
- Розуміння цього алгоритму допомагає в багатьох інших задачах з масивами.
`,
    testInput: [5, 2, 8, 1, 9],
    expectedOutput: 9,
    hints: [
      "Ініціалізуй max першим елементом масиву.",
      "Пройдися по всьому масиву і порівняй кожен елемент з max.",
      "Поверни max після проходу по масиву.",
    ],
  },
  {
    id: 2,
    title: "Знайти мінімум у масиві",
    description:
      "Напиши функцію, яка отримує масив чисел і повертає найменше число. Потрібно пройти масив по черзі і визначити, яке число найменше. Це допомагає навчитися аналізувати дані та працювати з умовами.",
    detailedDescription: `Мета: знайти найменше число серед усіх чисел у масиві.

Кроки:
1. Візьми перший елемент масиву як початковий мінімум.
2. Перебери всі інші елементи масиву по черзі.
3. Для кожного елемента порівняй його з поточним мінімумом:
   - Якщо елемент менший, онови мінімум.
   - Якщо ні, залиш без змін.
4. Продовжуй, поки не перевірено всі числа.
5. Після завершення циклу поверни значення мінімуму.

Чому так:
- Ми перевіряємо кожне число, щоб не пропустити найменше.
- Простий і надійний метод, який завжди працює.

Користь:
- Вчимося логічно аналізувати масив.
- Це основа для статистики та пошуку умов у масивах.
`,
    testInput: [5, 2, 8, 1, 9],
    expectedOutput: 1,
    hints: [
      "Ініціалізуй min першим елементом масиву.",
      "Пройдися по всьому масиву і порівняй кожен елемент з min.",
      "Поверни min після проходу по масиву.",
    ],
  },
  {
    id: 3,
    title: "Порахувати кількість непарних чисел",
    description:
      "Напиши функцію, яка рахує, скільки чисел у масиві є непарними. Для цього потрібно пройти кожне число і перевірити, чи ділиться воно на 2 з залишком. Ця задача тренує умовну логіку та лічильники.",
    detailedDescription: `Мета: дізнатися, скільки чисел у масиві не діляться на 2 без залишку (непарні).

Кроки:
1. Створи змінну-лічильник і встанови її рівною 0.
2. Перебери всі числа масиву по черзі.
3. Для кожного числа перевір:
   - Якщо число % 2 !== 0, воно непарне.
   - Збільшуй лічильник на 1 для кожного непарного числа.
4. Продовжуй для всіх чисел.
5. Після завершення циклу поверни значення лічильника.

Чому так:
- Ділення на 2 з перевіркою залишку показує, чи число парне чи непарне.
- Лічильник гарантує, що всі непарні числа будуть враховані.

Користь:
- Вчимося рахувати і фільтрувати елементи за умовою.
- Основи обробки масивів і статистики.
`,
    testInput: [5, 2, 8, 1, 9],
    expectedOutput: 3,
    hints: [
      "Пройдися по масиву і перевіряй, чи число непарне (num % 2 !== 0).",
      "Збільшуй лічильник для кожного непарного числа.",
      "Поверни лічильник.",
    ],
  },
  {
    id: 4,
    title: "Знайти суму чисел масиву",
    description:
      "Напиши функцію, яка обчислює суму всіх чисел у масиві. Проходь кожне число і додавай його до підсумку. Це основа для роботи з агрегованими даними та статистикою.",
    detailedDescription: `Мета: знайти суму всіх чисел у масиві.

Кроки:
1. Створи змінну sum і встанови її в 0.
2. Перебери всі числа масиву по черзі.
3. Для кожного числа додавай його до sum.
4. Продовжуй до кінця масиву.
5. Після завершення циклу поверни sum.

Чому так:
- Додаємо кожне число по черзі, щоб не пропустити жодного.
- Простий спосіб підрахунку загальної суми.

Користь:
- Вчимося додавати і працювати з агрегованими даними.
- Підготовка до обчислень середніх значень та статистики.
`,
    testInput: [5, 2, 8, 1, 9],
    expectedOutput: 25,
    hints: [
      "Ініціалізуй суму як 0.",
      "Пройдися по масиву і додавай кожен елемент до суми.",
      "Поверни суму.",
    ],
  },
  {
    id: 5,
    title: "Фільтрувати парні числа",
    description:
      "Напиши функцію, яка повертає новий масив, що містить тільки парні числа з вхідного масиву. Це дозволяє практикувати фільтрацію даних та створення нових масивів на основі умов.",
    detailedDescription: `Мета: створити новий масив, який містить лише парні числа.

Кроки:
1. Створи новий порожній масив result.
2. Перебери всі числа масиву по черзі.
3. Для кожного числа перевір:
   - Якщо число % 2 === 0, воно парне.
   - Додай його в result.
4. Продовжуй до кінця масиву.
5. Після циклу поверни result.

Чому так:
- Ділення на 2 допомагає визначити, чи число парне.
- Збираємо лише потрібні числа, ігноруючи непарні.

Користь:
- Вчимося фільтрувати дані.
- Основи створення нового масиву на основі умов.
`,
    testInput: [5, 2, 8, 1, 9],
    expectedOutput: [2, 8],
    hints: [
      "Пройдися по масиву і перевіряй num % 2 === 0.",
      "Збирай усі парні числа у новий масив.",
      "Поверни новий масив.",
    ],
  },
  {
    id: 6,
    title: "Перевірити, чи є число у масиві",
    description:
      "Напиши функцію, яка перевіряє, чи містить масив певне число. Пройди всі елементи, і якщо знайдеш потрібне число — поверни true, інакше false. Це тренує пошук даних та умовну логіку.",
    detailedDescription: `Мета: перевірити, чи містить масив певне число.

Кроки:
1. Візьми число, яке потрібно знайти (num).
2. Перебери всі числа масиву по черзі.
3. Для кожного елемента перевір:
   - Якщо поточний елемент === num, поверни true.
4. Якщо всі числа пройдені і збігів немає, поверни false.

Чому так:
- Перевіряємо кожен елемент, щоб не пропустити число.
- Повертаємо одразу true при знаходженні числа — ефективніше.

Користь:
- Вчимося шукати елементи в масиві.
- Основи логіки умов та оптимізації.
`,
    testInput: [[5, 2, 8, 1, 9], 8],
    expectedOutput: true,

    hints: [
      "Пройдися по всьому масиву.",
      "Порівняй кожен елемент з заданим числом.",
      "Якщо знайдеш збіг — поверни true, інакше — false.",
    ],
  },
  {
    id: 7,
    title: "Зворотній масив",
    description:
      "Напиши функцію, яка повертає масив у зворотному порядку. Створи новий масив і додай елементи починаючи з останнього до першого. Це допомагає зрозуміти індекси, цикли та створення нових масивів на основі існуючих.",
    detailedDescription: `Мета: отримати масив, де елементи йдуть у зворотному порядку.

Кроки:
1. Створи новий порожній масив reversed.
2. Перебери вхідний масив з останнього елемента до першого.
3. Для кожного елемента додай його в reversed.
4. Після завершення циклу поверни reversed.

Чому так:
- Проходимо у зворотному порядку, щоб перший елемент став останнім, а останній — першим.
- Використовуємо новий масив, щоб не змінювати початковий.

Користь:
- Вчимося створювати нові масиви і змінювати порядок елементів.
- Основи роботи з індексами і циклом.
`,
    testInput: [5, 2, 8, 1, 9],
    expectedOutput: [9, 1, 8, 2, 5],
    hints: [
      "Створи новий масив.",
      "Пройдися по старому масиву з кінця до початку.",
      "Додавай елементи у новий масив і поверни його.",
    ],
  },
  {
    id: 8,
    title: "Порахувати кількість елементів більше N",
    description:
      "Напиши функцію, яка отримує масив чисел та число N і повертає кількість елементів, більших за N. Пройди масив, перевір кожне число та підрахуй ті, що задовольняють умову. Це вчить аналізувати дані та використовувати лічильники.",
    detailedDescription: `Мета: дізнатися, скільки чисел у масиві перевищують певне число N.

Кроки:
1. Створи змінну-лічильник і встанови її на 0.
2. Перебери всі числа масиву по черзі.
3. Для кожного числа перевір:
   - Якщо число > N, збільшуй лічильник на 1.
4. Продовжуй до кінця масиву.
5. Після завершення циклу поверни лічильник.

Чому так:
- Кожне число перевіряємо, щоб не пропустити потрібне.
- Лічильник дозволяє підрахувати точну кількість.

Користь:
- Вчимося порівнювати числа та підраховувати умови.
- Основи статистики та аналізу даних.
`,
    testInput: [[5, 2, 8, 1, 9], 4],
    expectedOutput: 3,
    hints: [
      "Ініціалізуй лічильник як 0.",
      "Пройдися по масиву і перевіряй, чи елемент > N.",
      "Якщо так — збільшуй лічильник.",
      "Поверни лічильник.",
    ],
  },
  {
    id: 9,
    title: "Подвоїти всі елементи масиву",
    description:
      "Напиши функцію, яка створює новий масив, де всі числа з вхідного масиву подвоєні. Пройди масив, помнож кожне число на 2 та додай у новий масив. Це тренує роботу з циклами та перетворення даних.",
    detailedDescription: `Мета: створити новий масив, де кожен елемент вхідного масиву помножений на 2.

Кроки:
1. Створи порожній масив doubled.
2. Перебери всі числа масиву по черзі.
3. Для кожного числа помнож його на 2 і додай у doubled.
4. Після завершення циклу поверни doubled.

Чому так:
- Створюємо новий масив, щоб не змінювати оригінальний.
- Множення на 2 виконується для кожного елемента.

Користь:
- Вчимося створювати нові масиви та трансформувати дані.
- Підготовка до задач з масивами та функціями.
`,
    testInput: [5, 2, 8, 1, 9],
    expectedOutput: [10, 4, 16, 2, 18],
    hints: [
      "Створи новий масив.",
      "Пройдися по кожному елементу масиву і помнож його на 2.",
      "Додай результат у новий масив і поверни його.",
    ],
  },
  {
    id: 10,
    title: "Середнє арифметичне масиву",
    description:
      "Напиши функцію, яка отримує масив чисел і повертає їх середнє арифметичне. Для цього обчисли суму всіх чисел, а потім поділи її на кількість елементів. Це базова статистична операція для аналізу даних.",
    detailedDescription: `Мета: обчислити середнє арифметичне чисел у масиві.

Кроки:
1. Створи змінну sum = 0.
2. Перебери всі числа масиву по черзі.
3. Для кожного числа додавай його до sum.
4. Після завершення циклу поділи sum на кількість елементів масиву (arr.length).
5. Поверни отриманий результат.

Чому так:
- Додаючи всі числа, ми отримуємо загальну суму.
- Ділення на кількість елементів дає середнє значення.
- Це класичний підхід до обчислення середнього.

Користь:
- Вчимося працювати з сумами та середніми.
- Основи статистики та обробки даних.
`,
    testInput: [5, 2, 8, 1, 9],
    expectedOutput: 5,
    hints: [
      "Ініціалізуй суму як 0.",
      "Пройдися по масиву і додавай кожен елемент до суми.",
      "Поділи суму на кількість елементів масиву.",
      "Поверни результат.",
    ],
  },
];
